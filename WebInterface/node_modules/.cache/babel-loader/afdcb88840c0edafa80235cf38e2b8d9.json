{"ast":null,"code":"class Serial {\n  constructor() {\n    this.buffer_in = [];\n    this.buffer_out = [];\n    this.send_active = false;\n  }\n  static getPorts() {\n    return navigator.usb.getDevices().then(devices => {\n      return devices;\n    });\n  }\n  static requestPort() {\n    const filters = [{\n      'vendorId': 0x239A\n    },\n    // Adafruit boards\n    {\n      'vendorId': 0xcafe\n    } // TinyUSB example\n    ];\n    return navigator.usb.requestDevice({\n      'filters': filters\n    }).then(device => {\n      return device;\n    });\n  }\n  getEndpoints(interfaces) {\n    interfaces.forEach(element => {\n      var alternates = element.alternates;\n      alternates.forEach(elementalt => {\n        if (elementalt.interfaceClass === 0xFF) {\n          console.log(\"Interface number:\");\n          console.log(element.interfaceNumber);\n          this.ifNum = element.interfaceNumber;\n          elementalt.endpoints.forEach(elementendpoint => {\n            if (elementendpoint.direction === \"out\") {\n              console.log(\"Endpoint out: \");\n              console.log(elementendpoint.endpointNumber);\n              this.epOut = elementendpoint.endpointNumber;\n            }\n            if (elementendpoint.direction === \"in\") {\n              console.log(\"Endpoint in: \");\n              console.log(elementendpoint.endpointNumber);\n              this.epIn = elementendpoint.endpointNumber;\n            }\n          });\n        }\n      });\n    });\n  }\n  getDevice() {\n    let device = null;\n    this.ready = false;\n    return new Promise((resolve, reject) => {\n      Serial.requestPort().then(dev => {\n        console.log(\"Opening device...\");\n        device = dev;\n        this.device = device;\n        return dev.open();\n      }).then(() => {\n        console.log(\"Selecting configuration\");\n        return device.selectConfiguration(1);\n      }).then(() => {\n        console.log(\"Getting endpoints\");\n        this.getEndpoints(device.configuration.interfaces);\n      }).then(() => {\n        console.log(\"Claiming interface\");\n        return device.claimInterface(this.ifNum);\n      }).then(() => {\n        console.log(\"Select alt interface\");\n        return device.selectAlternateInterface(this.ifNum, 0);\n      }).then(() => {\n        console.log(\"Control Transfer Out\");\n        return device.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x01,\n          'index': this.ifNum\n        });\n      }).then(() => {\n        console.log(\"Ready!\");\n        this.ready = true;\n        this.device = device;\n        resolve();\n      });\n    });\n  }\n  receiveFromOtherGB(data) {\n    this.buffer_in.push(data);\n  }\n  receiveFromMyGB(data) {\n    this.buffer_out.push(data);\n  }\n  sendToMyGB() {\n    if (this.buffer_in.length > 0) {\n      this.device.transferIn(this.epIn, this.buffer_in.pop()).then(result => {\n        console.log(result);\n      });\n    }\n  }\n  sendToOtherGB() {\n    if (this.buffer_out.length > 0) {\n      return this.device.transferOut(this.epOut, this.buffer_out.pop());\n    }\n  }\n}\nexport { Serial };","map":{"version":3,"names":["Serial","constructor","buffer_in","buffer_out","send_active","getPorts","navigator","usb","getDevices","then","devices","requestPort","filters","requestDevice","device","getEndpoints","interfaces","forEach","element","alternates","elementalt","interfaceClass","console","log","interfaceNumber","ifNum","endpoints","elementendpoint","direction","endpointNumber","epOut","epIn","getDevice","ready","Promise","resolve","reject","dev","open","selectConfiguration","configuration","claimInterface","selectAlternateInterface","controlTransferOut","receiveFromOtherGB","data","push","receiveFromMyGB","sendToMyGB","length","transferIn","pop","result","sendToOtherGB","transferOut"],"sources":["/Users/charlesberthaume/Projects/relaypico-pico/WebInterface/src/serial.js"],"sourcesContent":["class Serial {\n    constructor() {\n        this.buffer_in = [];\n        this.buffer_out = [];\n        this.send_active = false;\n    }\n\n    static getPorts() {\n        return navigator.usb.getDevices().then(devices => {\n            return devices;\n        });\n    }\n\n    static requestPort() {\n        const filters = [\n            { 'vendorId': 0x239A }, // Adafruit boards\n            { 'vendorId': 0xcafe }, // TinyUSB example\n        ];\n        return navigator.usb.requestDevice({ 'filters': filters }).then(\n            device => {\n                return device;\n            }\n        );\n    }\n\n    getEndpoints(interfaces) {\n        interfaces.forEach(element => {\n            var alternates = element.alternates;\n            alternates.forEach(elementalt => {\n                if (elementalt.interfaceClass === 0xFF) {\n                    console.log(\"Interface number:\");\n                    console.log(element.interfaceNumber);\n                    this.ifNum = element.interfaceNumber;\n                    elementalt.endpoints.forEach(elementendpoint => {\n                        if (elementendpoint.direction === \"out\") {\n                            console.log(\"Endpoint out: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epOut = elementendpoint.endpointNumber;\n                        }\n\n                        if (elementendpoint.direction === \"in\") {\n                            console.log(\"Endpoint in: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epIn = elementendpoint.endpointNumber;\n                        }\n                    });\n                }\n            })\n        })\n    }\n\n    getDevice() {\n        let device = null;\n        this.ready = false;\n        return new Promise((resolve, reject) => {\n            Serial.requestPort().then(dev => {\n                console.log(\"Opening device...\");\n                device = dev;\n                this.device = device;\n                return dev.open();\n            }).then(() => {\n                console.log(\"Selecting configuration\");\n                return device.selectConfiguration(1);\n            }).then(() => {\n                console.log(\"Getting endpoints\")\n                this.getEndpoints(device.configuration.interfaces);\n            }).then(() => {\n                console.log(\"Claiming interface\");\n                return device.claimInterface(this.ifNum);\n            }).then(() => {\n                console.log(\"Select alt interface\");\n                return device.selectAlternateInterface(this.ifNum, 0);\n            }).then(() => {\n                console.log(\"Control Transfer Out\");\n                return device.controlTransferOut({\n                    'requestType': 'class',\n                    'recipient': 'interface',\n                    'request': 0x22,\n                    'value': 0x01,\n                    'index': this.ifNum\n                })\n            }).then(() => {\n                console.log(\"Ready!\");\n                this.ready = true;\n                this.device = device;\n                resolve();\n            })\n        });\n    }\n\n    receiveFromOtherGB(data) {\n        this.buffer_in.push(data);\n    }\n\n    receiveFromMyGB(data) {\n        this.buffer_out.push(data);\n    }\n\n    sendToMyGB()\n    {\n        if(this.buffer_in.length > 0){\n            this.device.transferIn(this.epIn, this.buffer_in.pop()).then(result => {\n               console.log(result);     \n            });\n        }\n    }\n\n    sendToOtherGB() {\n\n        if(this.buffer_out.length > 0)\n        {\n            return this.device.transferOut(this.epOut, this.buffer_out.pop()); \n        }\n    }\n}\n\nexport { Serial };"],"mappings":"AAAA,MAAMA,MAAM,CAAC;EACTC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,WAAW,GAAG,KAAK;EAC5B;EAEA,OAAOC,QAAQA,CAAA,EAAG;IACd,OAAOC,SAAS,CAACC,GAAG,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,IAAI;MAC9C,OAAOA,OAAO;IAClB,CAAC,CAAC;EACN;EAEA,OAAOC,WAAWA,CAAA,EAAG;IACjB,MAAMC,OAAO,GAAG,CACZ;MAAE,UAAU,EAAE;IAAO,CAAC;IAAE;IACxB;MAAE,UAAU,EAAE;IAAO,CAAC,CAAE;IAAA,CAC3B;IACD,OAAON,SAAS,CAACC,GAAG,CAACM,aAAa,CAAC;MAAE,SAAS,EAAED;IAAQ,CAAC,CAAC,CAACH,IAAI,CAC3DK,MAAM,IAAI;MACN,OAAOA,MAAM;IACjB,CACJ,CAAC;EACL;EAEAC,YAAYA,CAACC,UAAU,EAAE;IACrBA,UAAU,CAACC,OAAO,CAACC,OAAO,IAAI;MAC1B,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAU;MACnCA,UAAU,CAACF,OAAO,CAACG,UAAU,IAAI;QAC7B,IAAIA,UAAU,CAACC,cAAc,KAAK,IAAI,EAAE;UACpCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChCD,OAAO,CAACC,GAAG,CAACL,OAAO,CAACM,eAAe,CAAC;UACpC,IAAI,CAACC,KAAK,GAAGP,OAAO,CAACM,eAAe;UACpCJ,UAAU,CAACM,SAAS,CAACT,OAAO,CAACU,eAAe,IAAI;YAC5C,IAAIA,eAAe,CAACC,SAAS,KAAK,KAAK,EAAE;cACrCN,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;cAC7BD,OAAO,CAACC,GAAG,CAACI,eAAe,CAACE,cAAc,CAAC;cAC3C,IAAI,CAACC,KAAK,GAAGH,eAAe,CAACE,cAAc;YAC/C;YAEA,IAAIF,eAAe,CAACC,SAAS,KAAK,IAAI,EAAE;cACpCN,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;cAC5BD,OAAO,CAACC,GAAG,CAACI,eAAe,CAACE,cAAc,CAAC;cAC3C,IAAI,CAACE,IAAI,GAAGJ,eAAe,CAACE,cAAc;YAC9C;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAG,SAASA,CAAA,EAAG;IACR,IAAIlB,MAAM,GAAG,IAAI;IACjB,IAAI,CAACmB,KAAK,GAAG,KAAK;IAClB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpCpC,MAAM,CAACW,WAAW,CAAC,CAAC,CAACF,IAAI,CAAC4B,GAAG,IAAI;QAC7Bf,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCT,MAAM,GAAGuB,GAAG;QACZ,IAAI,CAACvB,MAAM,GAAGA,MAAM;QACpB,OAAOuB,GAAG,CAACC,IAAI,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC7B,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC,OAAOT,MAAM,CAACyB,mBAAmB,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,CAAC9B,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,IAAI,CAACR,YAAY,CAACD,MAAM,CAAC0B,aAAa,CAACxB,UAAU,CAAC;MACtD,CAAC,CAAC,CAACP,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC,OAAOT,MAAM,CAAC2B,cAAc,CAAC,IAAI,CAAChB,KAAK,CAAC;MAC5C,CAAC,CAAC,CAAChB,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnC,OAAOT,MAAM,CAAC4B,wBAAwB,CAAC,IAAI,CAACjB,KAAK,EAAE,CAAC,CAAC;MACzD,CAAC,CAAC,CAAChB,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnC,OAAOT,MAAM,CAAC6B,kBAAkB,CAAC;UAC7B,aAAa,EAAE,OAAO;UACtB,WAAW,EAAE,WAAW;UACxB,SAAS,EAAE,IAAI;UACf,OAAO,EAAE,IAAI;UACb,OAAO,EAAE,IAAI,CAAClB;QAClB,CAAC,CAAC;MACN,CAAC,CAAC,CAAChB,IAAI,CAAC,MAAM;QACVa,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB,IAAI,CAACU,KAAK,GAAG,IAAI;QACjB,IAAI,CAACnB,MAAM,GAAGA,MAAM;QACpBqB,OAAO,CAAC,CAAC;MACb,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAS,kBAAkBA,CAACC,IAAI,EAAE;IACrB,IAAI,CAAC3C,SAAS,CAAC4C,IAAI,CAACD,IAAI,CAAC;EAC7B;EAEAE,eAAeA,CAACF,IAAI,EAAE;IAClB,IAAI,CAAC1C,UAAU,CAAC2C,IAAI,CAACD,IAAI,CAAC;EAC9B;EAEAG,UAAUA,CAAA,EACV;IACI,IAAG,IAAI,CAAC9C,SAAS,CAAC+C,MAAM,GAAG,CAAC,EAAC;MACzB,IAAI,CAACnC,MAAM,CAACoC,UAAU,CAAC,IAAI,CAACnB,IAAI,EAAE,IAAI,CAAC7B,SAAS,CAACiD,GAAG,CAAC,CAAC,CAAC,CAAC1C,IAAI,CAAC2C,MAAM,IAAI;QACpE9B,OAAO,CAACC,GAAG,CAAC6B,MAAM,CAAC;MACtB,CAAC,CAAC;IACN;EACJ;EAEAC,aAAaA,CAAA,EAAG;IAEZ,IAAG,IAAI,CAAClD,UAAU,CAAC8C,MAAM,GAAG,CAAC,EAC7B;MACI,OAAO,IAAI,CAACnC,MAAM,CAACwC,WAAW,CAAC,IAAI,CAACxB,KAAK,EAAE,IAAI,CAAC3B,UAAU,CAACgD,GAAG,CAAC,CAAC,CAAC;IACrE;EACJ;AACJ;AAEA,SAASnD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module"}